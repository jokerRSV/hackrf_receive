package mavlib;

public class RRCFilter {

    private int xvCounter = 0;
    private static double GAIN = 9.868410946e+00;
    private static int NZEROS = 80;
    private static double XCOEFFS[] =
            {+0.0273676736, +0.0190682959, +0.0070661879, -0.0075385898,
                    -0.0231737159, -0.0379433607, -0.0498333862, -0.0569528373,
                    -0.0577853377, -0.0514204905, -0.0377352004, -0.0174982391,
                    +0.0076217868, +0.0351552125, +0.0620353691, +0.0848941519,
                    +0.1004237235, +0.1057694293, +0.0989127431, +0.0790009892,
                    +0.0465831968, +0.0037187043, -0.0460635022, -0.0979622825,
                    -0.1462501260, -0.1847425896, -0.2073523972, -0.2086782295,
                    -0.1845719273, -0.1326270847, -0.0525370892, +0.0537187153,
                    +0.1818868577, +0.3256572849, +0.4770745929, +0.6271117870,
                    +0.7663588857, +0.8857664963, +0.9773779594, +1.0349835419,
                    +1.0546365475, +1.0349835419, +0.9773779594, +0.8857664963,
                    +0.7663588857, +0.6271117870, +0.4770745929, +0.3256572849,
                    +0.1818868577, +0.0537187153, -0.0525370892, -0.1326270847,
                    -0.1845719273, -0.2086782295, -0.2073523972, -0.1847425896,
                    -0.1462501260, -0.0979622825, -0.0460635022, +0.0037187043,
                    +0.0465831968, +0.0790009892, +0.0989127431, +0.1057694293,
                    +0.1004237235, +0.0848941519, +0.0620353691, +0.0351552125,
                    +0.0076217868, -0.0174982391, -0.0377352004, -0.0514204905,
                    -0.0577853377, -0.0569528373, -0.0498333862, -0.0379433607,
                    -0.0231737159, -0.0075385898, +0.0070661879, +0.0190682959,
                    +0.0273676736};
    private double xv[] = new double[NZEROS + 1];


    public int rootRaisedFilter(int sample) {
        int i;
        double sum = 0.0;
        double in = (double) sample;
        // Add the latest sample to the xv circular buffer
        xv[xvCounter] = in / GAIN;
        // Increment the circular buffer counter and zero it if needed
        xvCounter++;
        if (xvCounter == (NZEROS + 1)) xvCounter = 0;
        // Do the RRC maths taking account of the fact that XV is a circular buffer
        int xvShadow = xvCounter;
        for (i = 0; i <= NZEROS; i++) {
            sum = sum + (XCOEFFS[i] * xv[xvShadow]);
            xvShadow++;
            if (xvShadow == (NZEROS + 1)) xvShadow = 0;
        }
        // All done
        return (int) sum;
    }
}
